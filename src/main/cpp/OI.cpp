// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/VisionDrive.h"
#include "Commands/ControlIntake.h"
#include "Commands/IntakeSystem.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/DriveStraightDistance.h"


/**
 * @brief Construct a new OI::OI object
 * 
 * 1. Initialize all push buttons (on push button panel)
 * 2. Initialize buttons for rotate commands
 * 3. Initialize buttons on driver joystick for hatch drop, vision lock, exposure toggle,
 *    intake/outtake, and raising robot
 */
OI::OI() {
   // Process operator interface input here.
   driverJoystick.reset(new frc::XboxController(0));
   operatorJoystick.reset(new frc::XboxController(1));

   // driver joystick button setups
	joystickDriverButtonVisionLock.reset(new frc::JoystickButton(driverJoystick.get(), 2));
   joystickDriverButtonVisionLock->WhileHeld(new VisionDrive());
   joystickButtonIntake.reset(new frc::JoystickButton(operatorJoystick.get(), 8));
   joystickButtonIntake->WhileHeld(new IntakeSystem());
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

/**
 * @brief Get the left driver joystick pointer
 * 
 * @return std::shared_ptr<frc::Joystick> 
 */
std::shared_ptr<frc::XboxController> OI::getDriverJoystick() {
   return driverJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

/**
 * @brief Get the operator joystick pointer
 * 
 * @return std::shared_ptr<frc::Joystick> 
 */
std::shared_ptr<frc::XboxController> OI::getOperatorJoystick() {
   return operatorJoystick;
}
